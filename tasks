# build & run
[file-build]
command:cpp=g++ -std=c++14 -Wall -O4 "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)"
command:c=gcc -O2 -Wall "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" -lstdc++ -lm -msse3
command:go=go build -o "$(VIM_PATHNOEXT)" "$(VIM_FILEPATH)"
; command:make=make -f "$(VIM_FILEPATH)"
command:rust=cargo build
cwd=$(VIM_FILEDIR) 
output=quickfix
errorformat=%f:%l:%m
save=2

[file-build-debug]
command:cpp=g++ -std=c++14 -Wall -g "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)"
command:c=gcc -Wall -g "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)"
cwd=$(VIM_FILEDIR)
output=quickfix
errorformat=%f:%l:%m
save=2

[file-run]
command="$(VIM_FILEDIR)/$(VIM_FILENOEXT)"
command:c,cpp="$(VIM_PATHNOEXT)"
command:go="$(VIM_PATHNOEXT)"
command:python=python "$(VIM_FILENAME)"
command:javascript=node "$(VIM_FILENAME)"
command:sh=sh "$(VIM_FILENAME)"
command:lua=lua "$(VIM_FILENAME)"
command:perl=perl "$(VIM_FILENAME)"
command:ruby=ruby "$(VIM_FILENAME)"
command:rust=cargo run
output=quickfix
cwd=$(VIM_FILEDIR)

[file-run-arg]
command:c,cpp="$(VIM_PATHNOEXT)" $(?argument)
output=quickfix
cwd=$(VIM_FILEDIR)

[file-drop]
command=rm -f "$(VIM_FILEDIR)/$(VIM_FILENOEXT)"
output=terminal

[cmake-file-build]
command=cmake -B "$(VIM_ROOT)/build"
command:c,cpp,cmake,make=cmake -B "$(VIM_ROOT)/build"
output=quickfix
cwd=$(VIM_ROOT)
save=2

[make-file-build]
command=make -j8 -C "$(VIM_ROOT)/build/"
command:c,cpp,cmake,make=make -j8 -C "$(VIM_ROOT)/build/"
output=quickfix
cwd=$(VIM_ROOT)
save=2

[make-file-build-debug]
command=make -j8 -C "$(VIM_ROOT)/build/" "$(VIM_FILENOEXT)"
command:c,cpp,cmake,make=make -j8 -C "$(VIM_ROOT)/build/" "$(VIM_FILENOEXT)"
output=quickfix
cwd=$(VIM_ROOT)
save=2

[make-file-test]
command=make -j8 -C "$(VIM_ROOT)/build/" test
command:c,cpp,cmake,make=make -j8 -C "$(VIM_ROOT)/build/" test
output=quickfix
cwd=$(VIM_ROOT)

[make-file-clean]
command=make -j8 -C "$(VIM_ROOT)/build/" clean
command:c,cpp,cmake,make=make -j8 -C "$(VIM_ROOT)/build/" clean
output=quickfix
cwd=$(VIM_ROOT)

[make-run-program]
command=make -C "$(VIM_ROOT)/build/" $(?which_program)
command:c,cpp=make -C "$(VIM_ROOT)/build/" $(VIM_FILENOEXT)
output=terminal
cwd=$(VIM_ROOT)

[make-run-program-is]
command=make -C "$(VIM_ROOT)/build/" $(?which_program)
command:c,cpp,cmake,make=make -C "$(VIM_ROOT)/build/" $(?which_program)
output=terminal
cwd=$(VIM_ROOT)

# ctags
[ctags-update]
command:c,cpp=ctags -R --c++-kinds=+p --fields=+iaS --extras=+q --output-format=e-ctags -f "$(VIM_ROOT)/.tags"
output=quickfix
cwd=$(VIM_ROOT)
save=2

# ici
[ici]
command=ici "$(VIM_CWORD)"
output=terminal

[ici-word]
command=ici $(?what word)
output=terminal

# browser
[browser-open-firefox]
command=firefox $(?open-file:$(VIM_FILENAME))
output=quickfix
cwd=$(VIM_FILEDIR)
save=2

[browser-open-chrome]
command=google-chrome-stable $(?open-file:$(VIM_FILENAME))
output=quickfix
cwd=$(VIM_FILEDIR)
save=2

# lsof
[search-pid-by-port]
command=echo $(?PWD !Warn) | sudo lsof -i :$(?pid:12306)
output=command

# tcpdump
[tcpdump-listen]
command=echo $(?PWD !Warn) | sudo -S tcpdump -ntv -i $(?interface:lo) -nn -vvv -X tcp and port $(?port)
output=terminal

[tcpdump-listen-write-file]
command=echo $(?PWD !Warn) | sudo -S sudo tcpdump -w $(?save-tcpdump-file:lo) -ntv -i $(?interface) -nn -vvv -X tcp and port $(?port)
output=terminal

[tcpdump-listen-read-file]
command=echo $(?PWD !Warn) | sudo -S tcpdump -r $(?read-tcpdump-file:lo) -N
output=terminal

[show-myip]
command=curl myip.ipip.net
output=quickfix

# server
[quickly-build-tcpserver]
command=nc -v -w $(?timeout) -tl $(?host:localhost) -p $(?port:12307)
output=terminal

[quickly-build-udpserver]
command=nc -v -w $(?timeout) -ul $(?host:localhost) -p $(?port:12307)

[quickly-search-pid-by-port]
command=netstat -anp | grep $(?port)
output=quickfix

[quickly-search-port]
command=netstat -tunl | grep $(?port)
output=quickfix

# doc-search
[cpp-find-sysetm-label]
command:c,cpp=echo $(?PWD !Warn) | sudo -S grep -Rn --color=auto --include="*.h" --include="*.c" --include="*.cc" --include="*.inc" '$(?search-label)' /usr
output=quickfix

[cpp-references-search]
command:c,cpp=cppman $(VIM_CWORD)
output=terminal

[cpp-references]
command:c,cpp=cppman $(?Search)
output=terminal

[git-clone]
command=git clone -b master --depth=1 $(?url)
output=terminal

[fzf]
command=fzf --preview '[[ $(file --mime {}) =~ binary ]] && echo {} is a binary file || (bat --style=numbers --color=always {} || highlight -O ansi -l {} || coderay {} || rougify {} || cat {}) 2> /dev/null | head -500'
output=terminal

# truecolor
[color]
command=awk 'BEGIN{ s="/\\/\\/\\/\\/\\"; s=s s s s s s s s; for (colnum = 0; colnum<77; colnum++) { r = 255-(colnum*255/76); g = (colnum*510/76); b = (colnum*255/76); if (g>255) g = 510-g; printf "\033[48;2;%d;%d;%dm", r,g,b; printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b; printf "%s\033[0m", substr(s,colnum+1,1); } printf "\n"; }'
output=terminal

# normal
[arch-install]
command=yay -S --needed --noconfirm $(?software)
output=terminal

[pacman-update]
command=yay --noconfirm --needed -Syyu
output=terminal

[system-log]
command=echo $(?PWD !Warn) | sudo -S dmesg | bat
output=terminal

[system-load]
command=vmstat $(?delay_between_update) -t
output=terminal

[system-cpu]
command=mpstat -P ALL $(?delay) $(?times)
output=terminal

[system-pid-single]
command=pidstat -p $(?PID) $(?delay) $(?times)
output=terminal

[system-pid-all]
command=pidstat $(?delay) $(?times)
output=terminal

[system-io]
command=iostat -xz $(?delay) $(?times)
output=terminal

[system-vm]
command=vmstat -t $(?delay) $(?times)
output=terminal

[system-battery-devices]
command=for i in /sys/class/hwmon/hwmon*/temp*_input; do echo "$(<$(dirname $i)/name): $(cat ${i%_*}_label 2>/dev/null || echo $(basename ${i%_*})) $(readlink -f $i)"; done | grep k10temp
output=terminal

# sar net: DEV/NFS/NFSD/SOCK/IP/ICMP/TCP/UDP/SOFT/FC[6/E]
[system-network-throughput]
command=sar -n $(?interface: DEV) $(?delay)
output=terminal

# docker
[docker-create]
command=docker run -it -p $(?tip:tpo:tpo) -p $(?uip:upo:upo)/udp --name $(?container_name) $(?images: ichheit-deb:9.1-deb) /bin/bash
output=terminal

[docker-start]
command=docker start -i $(?container)
output=terminal

[docker-commit]
command=docker commit $(?from_container) $(?to_image) && docker images
output=quickfix

[docker-delete]
command=docker rm -f $(?container) && echo deleted
output=quickfix

# fcitx
[restart-fcitx]
command=killall fcitx && killall sogou-qimpanel && sleep 1 && fcitx &
output=quickfix

[nnn]
command=nnn
output=terminal
cwd=$(VIM_FILEDIR) 

[show-difference]
command=diff -u --color=always $(?first_file) $(?second_file) | bat
output=terminal
cow=$(VIM_FILEDIR)

[compress-zstd]
command=CZFILE=$(?file); tar -I 'zstd -z -T0 --ultra -$(?compress-level:19) -v --priority=rt' -cvf "${CZFILE}.tar.zst" $CZFILE
output=terminal

[uncompress-zstd]
command=tar -I 'zstd -d -v -T0' -xvf $(?file)
output=terminal

[compress-lz4]
command=CLFILE=$(?file); tar -I 'lz4 -z -$(?compression-level:9) -v' -cvf "${CLFILE}.tar.lz4" $CLFILE
output=terminal

[uncompress-lz4]
command=tar -I 'lz4 -d -v' -xvf $(?file)
output=terminal

[clang-IR]
command=clang -c -S -emit-llvm $(?cfile)
output=terminal

[clang-eBPF]
command=clang -c -S -target bpf $(?cfile)
output=terminal

[clang-eBPF-bytecode]
command=clang -c -target bpf $(?cobject)
output=terminal

[ssl-or-tsl-access-server]
command=openssl s_client -connect $(?Server:outlook.office365.com):$(?Port:993)
output=terminal

[ssl-or-tsl-access-server2]
command=gnutls-cli --port $(?Port:993) $(?Server:outlook.office365.com)
output=terminal

[edit-file-in-tmux-session-by-vim]
command=tmux send-keys -t $(?Tmux-session:Ichheit) Escape ':tabedit $(VIM_FILEDIR)/$(?filename)' Enter
output=quickfix

[edit-file-bymyself-in-tmux-session-by-vim]
command=tmux send-keys -t $(?Tmux-session:Ichheit) Escape ':tabedit $(VIM_FILEPATH)' Enter
output=quickfix

[edit-file-from-terminal-by-vim-to-tmux]
command=tmux send-keys -t $(?Tmux-session) Escape ':tabedit `pwd`/$(?filename)' Enter
output=terminal

[curl-download-file]
command=curl -# -o $(?target_filename) $(?source_url)
output=terminal

[check-weather]
command=ansiweather -l $(?location:Guangzhou),CN -u metric -a false -s true -i true -w true -h true -p true -d true -f $(?offset:0)
output=quickfix

[check-weather-terminal]
command=ansiweather -l $(?location:Guangzhou),CN -u metric -a true -s true -i true -w true -h true -p true -d true -f $(?offset:0)
output=terminal
